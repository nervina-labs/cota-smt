// Generated by Molecule 0.7.0

#![allow(unused_imports)]
#![allow(dead_code)]
#![allow(clippy::if_same_then_else)]

use super::ckb_types::prelude::*;
use super::molecule::{self, prelude::*};
extern crate alloc;
pub use alloc::vec::*;
// these lines above are manually added
// replace "::molecule" to "molecule" in below code

use super::common::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct DefineCotaNFTId(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for DefineCotaNFTId {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for DefineCotaNFTId {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for DefineCotaNFTId {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "smt_type", self.smt_type())?;
        write!(f, ", {}: {}", "cota_id", self.cota_id())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for DefineCotaNFTId {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        DefineCotaNFTId::new_unchecked(v.into())
    }
}
impl DefineCotaNFTId {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [2, 20];
    pub const TOTAL_SIZE: usize = 22;

    pub fn smt_type(&self) -> Uint16 {
        Uint16::new_unchecked(self.0.slice(0..2))
    }

    pub fn cota_id(&self) -> CotaId {
        CotaId::new_unchecked(self.0.slice(2..22))
    }

    pub fn as_reader<'r>(&'r self) -> DefineCotaNFTIdReader<'r> {
        DefineCotaNFTIdReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for DefineCotaNFTId {
    type Builder = DefineCotaNFTIdBuilder;

    const NAME: &'static str = "DefineCotaNFTId";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        DefineCotaNFTId(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DefineCotaNFTIdReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DefineCotaNFTIdReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .smt_type(self.smt_type())
            .cota_id(self.cota_id())
    }
}
#[derive(Clone, Copy)]
pub struct DefineCotaNFTIdReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for DefineCotaNFTIdReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for DefineCotaNFTIdReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for DefineCotaNFTIdReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "smt_type", self.smt_type())?;
        write!(f, ", {}: {}", "cota_id", self.cota_id())?;
        write!(f, " }}")
    }
}
impl<'r> DefineCotaNFTIdReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [2, 20];
    pub const TOTAL_SIZE: usize = 22;

    pub fn smt_type(&self) -> Uint16Reader<'r> {
        Uint16Reader::new_unchecked(&self.as_slice()[0..2])
    }

    pub fn cota_id(&self) -> CotaIdReader<'r> {
        CotaIdReader::new_unchecked(&self.as_slice()[2..22])
    }
}
impl<'r> molecule::prelude::Reader<'r> for DefineCotaNFTIdReader<'r> {
    type Entity = DefineCotaNFTId;

    const NAME: &'static str = "DefineCotaNFTIdReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        DefineCotaNFTIdReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct DefineCotaNFTIdBuilder {
    pub(crate) smt_type: Uint16,
    pub(crate) cota_id:  CotaId,
}
impl DefineCotaNFTIdBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [2, 20];
    pub const TOTAL_SIZE: usize = 22;

    pub fn smt_type(mut self, v: Uint16) -> Self {
        self.smt_type = v;
        self
    }

    pub fn cota_id(mut self, v: CotaId) -> Self {
        self.cota_id = v;
        self
    }
}
impl molecule::prelude::Builder for DefineCotaNFTIdBuilder {
    type Entity = DefineCotaNFTId;

    const NAME: &'static str = "DefineCotaNFTIdBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.smt_type.as_slice())?;
        writer.write_all(self.cota_id.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        DefineCotaNFTId::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct DefineCotaNFTKeyVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for DefineCotaNFTKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for DefineCotaNFTKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for DefineCotaNFTKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for DefineCotaNFTKeyVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        DefineCotaNFTKeyVec::new_unchecked(v.into())
    }
}
impl DefineCotaNFTKeyVec {
    pub const ITEM_SIZE: usize = 22;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<DefineCotaNFTId> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> DefineCotaNFTId {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        DefineCotaNFTId::new_unchecked(self.0.slice(start..end))
    }

    pub fn as_reader<'r>(&'r self) -> DefineCotaNFTKeyVecReader<'r> {
        DefineCotaNFTKeyVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for DefineCotaNFTKeyVec {
    type Builder = DefineCotaNFTKeyVecBuilder;

    const NAME: &'static str = "DefineCotaNFTKeyVec";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        DefineCotaNFTKeyVec(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DefineCotaNFTKeyVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DefineCotaNFTKeyVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct DefineCotaNFTKeyVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for DefineCotaNFTKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for DefineCotaNFTKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for DefineCotaNFTKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> DefineCotaNFTKeyVecReader<'r> {
    pub const ITEM_SIZE: usize = 22;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<DefineCotaNFTIdReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> DefineCotaNFTIdReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        DefineCotaNFTIdReader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for DefineCotaNFTKeyVecReader<'r> {
    type Entity = DefineCotaNFTKeyVec;

    const NAME: &'static str = "DefineCotaNFTKeyVecReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        DefineCotaNFTKeyVecReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct DefineCotaNFTKeyVecBuilder(pub(crate) Vec<DefineCotaNFTId>);
impl DefineCotaNFTKeyVecBuilder {
    pub const ITEM_SIZE: usize = 22;

    pub fn set(mut self, v: Vec<DefineCotaNFTId>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: DefineCotaNFTId) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = DefineCotaNFTId>>(
        mut self,
        iter: T,
    ) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for DefineCotaNFTKeyVecBuilder {
    type Entity = DefineCotaNFTKeyVec;

    const NAME: &'static str = "DefineCotaNFTKeyVecBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        DefineCotaNFTKeyVec::new_unchecked(inner.into())
    }
}
pub struct DefineCotaNFTKeyVecIterator(DefineCotaNFTKeyVec, usize, usize);
impl ::core::iter::Iterator for DefineCotaNFTKeyVecIterator {
    type Item = DefineCotaNFTId;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for DefineCotaNFTKeyVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for DefineCotaNFTKeyVec {
    type IntoIter = DefineCotaNFTKeyVecIterator;
    type Item = DefineCotaNFTId;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        DefineCotaNFTKeyVecIterator(self, 0, len)
    }
}
impl<'r> DefineCotaNFTKeyVecReader<'r> {
    pub fn iter<'t>(&'t self) -> DefineCotaNFTKeyVecReaderIterator<'t, 'r> {
        DefineCotaNFTKeyVecReaderIterator(&self, 0, self.len())
    }
}
pub struct DefineCotaNFTKeyVecReaderIterator<'t, 'r>(
    &'t DefineCotaNFTKeyVecReader<'r>,
    usize,
    usize,
);
impl<'t: 'r, 'r> ::core::iter::Iterator for DefineCotaNFTKeyVecReaderIterator<'t, 'r> {
    type Item = DefineCotaNFTIdReader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for DefineCotaNFTKeyVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct DefineCotaNFTValue(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for DefineCotaNFTValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for DefineCotaNFTValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for DefineCotaNFTValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "total", self.total())?;
        write!(f, ", {}: {}", "issued", self.issued())?;
        write!(f, ", {}: {}", "configure", self.configure())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for DefineCotaNFTValue {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            25, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        DefineCotaNFTValue::new_unchecked(v.into())
    }
}
impl DefineCotaNFTValue {
    pub const FIELD_COUNT: usize = 3;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn total(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }

    pub fn issued(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }

    pub fn configure(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[16..]) as usize;
            Byte::new_unchecked(self.0.slice(start..end))
        } else {
            Byte::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> DefineCotaNFTValueReader<'r> {
        DefineCotaNFTValueReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for DefineCotaNFTValue {
    type Builder = DefineCotaNFTValueBuilder;

    const NAME: &'static str = "DefineCotaNFTValue";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        DefineCotaNFTValue(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DefineCotaNFTValueReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DefineCotaNFTValueReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .total(self.total())
            .issued(self.issued())
            .configure(self.configure())
    }
}
#[derive(Clone, Copy)]
pub struct DefineCotaNFTValueReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for DefineCotaNFTValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for DefineCotaNFTValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for DefineCotaNFTValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "total", self.total())?;
        write!(f, ", {}: {}", "issued", self.issued())?;
        write!(f, ", {}: {}", "configure", self.configure())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> DefineCotaNFTValueReader<'r> {
    pub const FIELD_COUNT: usize = 3;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn total(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn issued(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn configure(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[16..]) as usize;
            ByteReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            ByteReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for DefineCotaNFTValueReader<'r> {
    type Entity = DefineCotaNFTValue;

    const NAME: &'static str = "DefineCotaNFTValueReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        DefineCotaNFTValueReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Uint32Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Uint32Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        ByteReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct DefineCotaNFTValueBuilder {
    pub(crate) total:     Uint32,
    pub(crate) issued:    Uint32,
    pub(crate) configure: Byte,
}
impl DefineCotaNFTValueBuilder {
    pub const FIELD_COUNT: usize = 3;

    pub fn total(mut self, v: Uint32) -> Self {
        self.total = v;
        self
    }

    pub fn issued(mut self, v: Uint32) -> Self {
        self.issued = v;
        self
    }

    pub fn configure(mut self, v: Byte) -> Self {
        self.configure = v;
        self
    }
}
impl molecule::prelude::Builder for DefineCotaNFTValueBuilder {
    type Entity = DefineCotaNFTValue;

    const NAME: &'static str = "DefineCotaNFTValueBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.total.as_slice().len()
            + self.issued.as_slice().len()
            + self.configure.as_slice().len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.total.as_slice().len();
        offsets.push(total_size);
        total_size += self.issued.as_slice().len();
        offsets.push(total_size);
        total_size += self.configure.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.total.as_slice())?;
        writer.write_all(self.issued.as_slice())?;
        writer.write_all(self.configure.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        DefineCotaNFTValue::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct DefineCotaNFTValueVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for DefineCotaNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for DefineCotaNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for DefineCotaNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for DefineCotaNFTValueVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![4, 0, 0, 0];
        DefineCotaNFTValueVec::new_unchecked(v.into())
    }
}
impl DefineCotaNFTValueVec {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<DefineCotaNFTValue> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> DefineCotaNFTValue {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            DefineCotaNFTValue::new_unchecked(self.0.slice(start..))
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            DefineCotaNFTValue::new_unchecked(self.0.slice(start..end))
        }
    }

    pub fn as_reader<'r>(&'r self) -> DefineCotaNFTValueVecReader<'r> {
        DefineCotaNFTValueVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for DefineCotaNFTValueVec {
    type Builder = DefineCotaNFTValueVecBuilder;

    const NAME: &'static str = "DefineCotaNFTValueVec";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        DefineCotaNFTValueVec(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DefineCotaNFTValueVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DefineCotaNFTValueVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct DefineCotaNFTValueVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for DefineCotaNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for DefineCotaNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for DefineCotaNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> DefineCotaNFTValueVecReader<'r> {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<DefineCotaNFTValueReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> DefineCotaNFTValueReader<'r> {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            DefineCotaNFTValueReader::new_unchecked(&self.as_slice()[start..])
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            DefineCotaNFTValueReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for DefineCotaNFTValueVecReader<'r> {
    type Entity = DefineCotaNFTValueVec;

    const NAME: &'static str = "DefineCotaNFTValueVecReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        DefineCotaNFTValueVecReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(
                Self,
                TotalSizeNotMatch,
                molecule::NUMBER_SIZE * 2,
                slice_len
            );
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            DefineCotaNFTValueReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct DefineCotaNFTValueVecBuilder(pub(crate) Vec<DefineCotaNFTValue>);
impl DefineCotaNFTValueVecBuilder {
    pub fn set(mut self, v: Vec<DefineCotaNFTValue>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: DefineCotaNFTValue) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = DefineCotaNFTValue>>(
        mut self,
        iter: T,
    ) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for DefineCotaNFTValueVecBuilder {
    type Entity = DefineCotaNFTValueVec;

    const NAME: &'static str = "DefineCotaNFTValueVecBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (self.0.len() + 1)
            + self
                .0
                .iter()
                .map(|inner| inner.as_slice().len())
                .sum::<usize>()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 {
            writer.write_all(&molecule::pack_number(
                molecule::NUMBER_SIZE as molecule::Number,
            ))?;
        } else {
            let (total_size, offsets) = self.0.iter().fold(
                (
                    molecule::NUMBER_SIZE * (item_count + 1),
                    Vec::with_capacity(item_count),
                ),
                |(start, mut offsets), inner| {
                    offsets.push(start);
                    (start + inner.as_slice().len(), offsets)
                },
            );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() {
                writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
            }
            for inner in self.0.iter() {
                writer.write_all(inner.as_slice())?;
            }
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        DefineCotaNFTValueVec::new_unchecked(inner.into())
    }
}
pub struct DefineCotaNFTValueVecIterator(DefineCotaNFTValueVec, usize, usize);
impl ::core::iter::Iterator for DefineCotaNFTValueVecIterator {
    type Item = DefineCotaNFTValue;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for DefineCotaNFTValueVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for DefineCotaNFTValueVec {
    type IntoIter = DefineCotaNFTValueVecIterator;
    type Item = DefineCotaNFTValue;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        DefineCotaNFTValueVecIterator(self, 0, len)
    }
}
impl<'r> DefineCotaNFTValueVecReader<'r> {
    pub fn iter<'t>(&'t self) -> DefineCotaNFTValueVecReaderIterator<'t, 'r> {
        DefineCotaNFTValueVecReaderIterator(&self, 0, self.len())
    }
}
pub struct DefineCotaNFTValueVecReaderIterator<'t, 'r>(
    &'t DefineCotaNFTValueVecReader<'r>,
    usize,
    usize,
);
impl<'t: 'r, 'r> ::core::iter::Iterator for DefineCotaNFTValueVecReaderIterator<'t, 'r> {
    type Item = DefineCotaNFTValueReader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for DefineCotaNFTValueVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct DefineCotaNFTEntries(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for DefineCotaNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for DefineCotaNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for DefineCotaNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "define_keys", self.define_keys())?;
        write!(f, ", {}: {}", "define_old_values", self.define_old_values())?;
        write!(f, ", {}: {}", "define_new_values", self.define_new_values())?;
        write!(f, ", {}: {}", "hold_keys", self.hold_keys())?;
        write!(f, ", {}: {}", "hold_values", self.hold_values())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        write!(f, ", {}: {}", "action", self.action())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for DefineCotaNFTEntries {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            60, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 48, 0, 0, 0, 52, 0, 0,
            0, 56, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0,
        ];
        DefineCotaNFTEntries::new_unchecked(v.into())
    }
}
impl DefineCotaNFTEntries {
    pub const FIELD_COUNT: usize = 7;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn define_keys(&self) -> DefineCotaNFTKeyVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        DefineCotaNFTKeyVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn define_old_values(&self) -> DefineCotaNFTValueVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        DefineCotaNFTValueVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn define_new_values(&self) -> DefineCotaNFTValueVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        DefineCotaNFTValueVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn hold_keys(&self) -> HoldCotaNFTKeyVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        HoldCotaNFTKeyVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn hold_values(&self) -> HoldCotaNFTValueVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        HoldCotaNFTValueVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn proof(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Bytes::new_unchecked(self.0.slice(start..end))
    }

    pub fn action(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[32..]) as usize;
            Bytes::new_unchecked(self.0.slice(start..end))
        } else {
            Bytes::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> DefineCotaNFTEntriesReader<'r> {
        DefineCotaNFTEntriesReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for DefineCotaNFTEntries {
    type Builder = DefineCotaNFTEntriesBuilder;

    const NAME: &'static str = "DefineCotaNFTEntries";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        DefineCotaNFTEntries(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DefineCotaNFTEntriesReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DefineCotaNFTEntriesReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .define_keys(self.define_keys())
            .define_old_values(self.define_old_values())
            .define_new_values(self.define_new_values())
            .hold_keys(self.hold_keys())
            .hold_values(self.hold_values())
            .proof(self.proof())
            .action(self.action())
    }
}
#[derive(Clone, Copy)]
pub struct DefineCotaNFTEntriesReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for DefineCotaNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for DefineCotaNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for DefineCotaNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "define_keys", self.define_keys())?;
        write!(f, ", {}: {}", "define_old_values", self.define_old_values())?;
        write!(f, ", {}: {}", "define_new_values", self.define_new_values())?;
        write!(f, ", {}: {}", "hold_keys", self.hold_keys())?;
        write!(f, ", {}: {}", "hold_values", self.hold_values())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        write!(f, ", {}: {}", "action", self.action())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> DefineCotaNFTEntriesReader<'r> {
    pub const FIELD_COUNT: usize = 7;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn define_keys(&self) -> DefineCotaNFTKeyVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        DefineCotaNFTKeyVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn define_old_values(&self) -> DefineCotaNFTValueVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        DefineCotaNFTValueVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn define_new_values(&self) -> DefineCotaNFTValueVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        DefineCotaNFTValueVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn hold_keys(&self) -> HoldCotaNFTKeyVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        HoldCotaNFTKeyVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn hold_values(&self) -> HoldCotaNFTValueVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        HoldCotaNFTValueVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn proof(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        BytesReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn action(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[32..]) as usize;
            BytesReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            BytesReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for DefineCotaNFTEntriesReader<'r> {
    type Entity = DefineCotaNFTEntries;

    const NAME: &'static str = "DefineCotaNFTEntriesReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        DefineCotaNFTEntriesReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        DefineCotaNFTKeyVecReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        DefineCotaNFTValueVecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        DefineCotaNFTValueVecReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        HoldCotaNFTKeyVecReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        HoldCotaNFTValueVecReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        BytesReader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        BytesReader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct DefineCotaNFTEntriesBuilder {
    pub(crate) define_keys:       DefineCotaNFTKeyVec,
    pub(crate) define_old_values: DefineCotaNFTValueVec,
    pub(crate) define_new_values: DefineCotaNFTValueVec,
    pub(crate) hold_keys:         HoldCotaNFTKeyVec,
    pub(crate) hold_values:       HoldCotaNFTValueVec,
    pub(crate) proof:             Bytes,
    pub(crate) action:            Bytes,
}
impl DefineCotaNFTEntriesBuilder {
    pub const FIELD_COUNT: usize = 7;

    pub fn define_keys(mut self, v: DefineCotaNFTKeyVec) -> Self {
        self.define_keys = v;
        self
    }

    pub fn define_old_values(mut self, v: DefineCotaNFTValueVec) -> Self {
        self.define_old_values = v;
        self
    }

    pub fn define_new_values(mut self, v: DefineCotaNFTValueVec) -> Self {
        self.define_new_values = v;
        self
    }

    pub fn hold_keys(mut self, v: HoldCotaNFTKeyVec) -> Self {
        self.hold_keys = v;
        self
    }

    pub fn hold_values(mut self, v: HoldCotaNFTValueVec) -> Self {
        self.hold_values = v;
        self
    }

    pub fn proof(mut self, v: Bytes) -> Self {
        self.proof = v;
        self
    }

    pub fn action(mut self, v: Bytes) -> Self {
        self.action = v;
        self
    }
}
impl molecule::prelude::Builder for DefineCotaNFTEntriesBuilder {
    type Entity = DefineCotaNFTEntries;

    const NAME: &'static str = "DefineCotaNFTEntriesBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.define_keys.as_slice().len()
            + self.define_old_values.as_slice().len()
            + self.define_new_values.as_slice().len()
            + self.hold_keys.as_slice().len()
            + self.hold_values.as_slice().len()
            + self.proof.as_slice().len()
            + self.action.as_slice().len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.define_keys.as_slice().len();
        offsets.push(total_size);
        total_size += self.define_old_values.as_slice().len();
        offsets.push(total_size);
        total_size += self.define_new_values.as_slice().len();
        offsets.push(total_size);
        total_size += self.hold_keys.as_slice().len();
        offsets.push(total_size);
        total_size += self.hold_values.as_slice().len();
        offsets.push(total_size);
        total_size += self.proof.as_slice().len();
        offsets.push(total_size);
        total_size += self.action.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.define_keys.as_slice())?;
        writer.write_all(self.define_old_values.as_slice())?;
        writer.write_all(self.define_new_values.as_slice())?;
        writer.write_all(self.hold_keys.as_slice())?;
        writer.write_all(self.hold_values.as_slice())?;
        writer.write_all(self.proof.as_slice())?;
        writer.write_all(self.action.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        DefineCotaNFTEntries::new_unchecked(inner.into())
    }
}
