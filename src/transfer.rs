// Generated by Molecule 0.7.0

#![allow(unused_imports)]
#![allow(dead_code)]
#![allow(clippy::if_same_then_else)]

use super::ckb_types::prelude::*;
use super::molecule::{self, prelude::*};
extern crate alloc;
pub use alloc::vec::*;
// these lines above are manually added
// replace "::molecule" to "molecule" in below code

use super::common::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct WithdrawalCotaNFTKeyVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for WithdrawalCotaNFTKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for WithdrawalCotaNFTKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for WithdrawalCotaNFTKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for WithdrawalCotaNFTKeyVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        WithdrawalCotaNFTKeyVec::new_unchecked(v.into())
    }
}
impl WithdrawalCotaNFTKeyVec {
    pub const ITEM_SIZE: usize = 26;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<CotaNFTId> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> CotaNFTId {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        CotaNFTId::new_unchecked(self.0.slice(start..end))
    }

    pub fn as_reader<'r>(&'r self) -> WithdrawalCotaNFTKeyVecReader<'r> {
        WithdrawalCotaNFTKeyVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for WithdrawalCotaNFTKeyVec {
    type Builder = WithdrawalCotaNFTKeyVecBuilder;

    const NAME: &'static str = "WithdrawalCotaNFTKeyVec";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        WithdrawalCotaNFTKeyVec(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawalCotaNFTKeyVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawalCotaNFTKeyVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct WithdrawalCotaNFTKeyVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for WithdrawalCotaNFTKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for WithdrawalCotaNFTKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for WithdrawalCotaNFTKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> WithdrawalCotaNFTKeyVecReader<'r> {
    pub const ITEM_SIZE: usize = 26;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<CotaNFTIdReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> CotaNFTIdReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        CotaNFTIdReader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for WithdrawalCotaNFTKeyVecReader<'r> {
    type Entity = WithdrawalCotaNFTKeyVec;

    const NAME: &'static str = "WithdrawalCotaNFTKeyVecReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        WithdrawalCotaNFTKeyVecReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct WithdrawalCotaNFTKeyVecBuilder(pub(crate) Vec<CotaNFTId>);
impl WithdrawalCotaNFTKeyVecBuilder {
    pub const ITEM_SIZE: usize = 26;

    pub fn set(mut self, v: Vec<CotaNFTId>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: CotaNFTId) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = CotaNFTId>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for WithdrawalCotaNFTKeyVecBuilder {
    type Entity = WithdrawalCotaNFTKeyVec;

    const NAME: &'static str = "WithdrawalCotaNFTKeyVecBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        WithdrawalCotaNFTKeyVec::new_unchecked(inner.into())
    }
}
pub struct WithdrawalCotaNFTKeyVecIterator(WithdrawalCotaNFTKeyVec, usize, usize);
impl ::core::iter::Iterator for WithdrawalCotaNFTKeyVecIterator {
    type Item = CotaNFTId;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for WithdrawalCotaNFTKeyVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for WithdrawalCotaNFTKeyVec {
    type IntoIter = WithdrawalCotaNFTKeyVecIterator;
    type Item = CotaNFTId;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        WithdrawalCotaNFTKeyVecIterator(self, 0, len)
    }
}
impl<'r> WithdrawalCotaNFTKeyVecReader<'r> {
    pub fn iter<'t>(&'t self) -> WithdrawalCotaNFTKeyVecReaderIterator<'t, 'r> {
        WithdrawalCotaNFTKeyVecReaderIterator(&self, 0, self.len())
    }
}
pub struct WithdrawalCotaNFTKeyVecReaderIterator<'t, 'r>(
    &'t WithdrawalCotaNFTKeyVecReader<'r>,
    usize,
    usize,
);
impl<'t: 'r, 'r> ::core::iter::Iterator for WithdrawalCotaNFTKeyVecReaderIterator<'t, 'r> {
    type Item = CotaNFTIdReader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for WithdrawalCotaNFTKeyVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct WithdrawalCotaNFTValue(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for WithdrawalCotaNFTValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for WithdrawalCotaNFTValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for WithdrawalCotaNFTValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "nft_info", self.nft_info())?;
        write!(f, ", {}: {}", "to", self.to())?;
        write!(f, ", {}: {}", "out_point", self.out_point())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for WithdrawalCotaNFTValue {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            82, 0, 0, 0, 16, 0, 0, 0, 38, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        WithdrawalCotaNFTValue::new_unchecked(v.into())
    }
}
impl WithdrawalCotaNFTValue {
    pub const FIELD_COUNT: usize = 3;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn nft_info(&self) -> CotaNFTInfo {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        CotaNFTInfo::new_unchecked(self.0.slice(start..end))
    }

    pub fn to(&self) -> LockHashSlice {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        LockHashSlice::new_unchecked(self.0.slice(start..end))
    }

    pub fn out_point(&self) -> OutPointSlice {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[16..]) as usize;
            OutPointSlice::new_unchecked(self.0.slice(start..end))
        } else {
            OutPointSlice::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> WithdrawalCotaNFTValueReader<'r> {
        WithdrawalCotaNFTValueReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for WithdrawalCotaNFTValue {
    type Builder = WithdrawalCotaNFTValueBuilder;

    const NAME: &'static str = "WithdrawalCotaNFTValue";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        WithdrawalCotaNFTValue(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawalCotaNFTValueReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawalCotaNFTValueReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .nft_info(self.nft_info())
            .to(self.to())
            .out_point(self.out_point())
    }
}
#[derive(Clone, Copy)]
pub struct WithdrawalCotaNFTValueReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for WithdrawalCotaNFTValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for WithdrawalCotaNFTValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for WithdrawalCotaNFTValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "nft_info", self.nft_info())?;
        write!(f, ", {}: {}", "to", self.to())?;
        write!(f, ", {}: {}", "out_point", self.out_point())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> WithdrawalCotaNFTValueReader<'r> {
    pub const FIELD_COUNT: usize = 3;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn nft_info(&self) -> CotaNFTInfoReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        CotaNFTInfoReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn to(&self) -> LockHashSliceReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        LockHashSliceReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn out_point(&self) -> OutPointSliceReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[16..]) as usize;
            OutPointSliceReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            OutPointSliceReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for WithdrawalCotaNFTValueReader<'r> {
    type Entity = WithdrawalCotaNFTValue;

    const NAME: &'static str = "WithdrawalCotaNFTValueReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        WithdrawalCotaNFTValueReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        CotaNFTInfoReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        LockHashSliceReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        OutPointSliceReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct WithdrawalCotaNFTValueBuilder {
    pub(crate) nft_info:  CotaNFTInfo,
    pub(crate) to:        LockHashSlice,
    pub(crate) out_point: OutPointSlice,
}
impl WithdrawalCotaNFTValueBuilder {
    pub const FIELD_COUNT: usize = 3;

    pub fn nft_info(mut self, v: CotaNFTInfo) -> Self {
        self.nft_info = v;
        self
    }

    pub fn to(mut self, v: LockHashSlice) -> Self {
        self.to = v;
        self
    }

    pub fn out_point(mut self, v: OutPointSlice) -> Self {
        self.out_point = v;
        self
    }
}
impl molecule::prelude::Builder for WithdrawalCotaNFTValueBuilder {
    type Entity = WithdrawalCotaNFTValue;

    const NAME: &'static str = "WithdrawalCotaNFTValueBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.nft_info.as_slice().len()
            + self.to.as_slice().len()
            + self.out_point.as_slice().len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.nft_info.as_slice().len();
        offsets.push(total_size);
        total_size += self.to.as_slice().len();
        offsets.push(total_size);
        total_size += self.out_point.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.nft_info.as_slice())?;
        writer.write_all(self.to.as_slice())?;
        writer.write_all(self.out_point.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        WithdrawalCotaNFTValue::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct WithdrawalCotaNFTValueVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for WithdrawalCotaNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for WithdrawalCotaNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for WithdrawalCotaNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for WithdrawalCotaNFTValueVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![4, 0, 0, 0];
        WithdrawalCotaNFTValueVec::new_unchecked(v.into())
    }
}
impl WithdrawalCotaNFTValueVec {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<WithdrawalCotaNFTValue> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> WithdrawalCotaNFTValue {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            WithdrawalCotaNFTValue::new_unchecked(self.0.slice(start..))
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            WithdrawalCotaNFTValue::new_unchecked(self.0.slice(start..end))
        }
    }

    pub fn as_reader<'r>(&'r self) -> WithdrawalCotaNFTValueVecReader<'r> {
        WithdrawalCotaNFTValueVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for WithdrawalCotaNFTValueVec {
    type Builder = WithdrawalCotaNFTValueVecBuilder;

    const NAME: &'static str = "WithdrawalCotaNFTValueVec";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        WithdrawalCotaNFTValueVec(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawalCotaNFTValueVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawalCotaNFTValueVecReader::from_compatible_slice(slice)
            .map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct WithdrawalCotaNFTValueVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for WithdrawalCotaNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for WithdrawalCotaNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for WithdrawalCotaNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> WithdrawalCotaNFTValueVecReader<'r> {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<WithdrawalCotaNFTValueReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> WithdrawalCotaNFTValueReader<'r> {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            WithdrawalCotaNFTValueReader::new_unchecked(&self.as_slice()[start..])
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            WithdrawalCotaNFTValueReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for WithdrawalCotaNFTValueVecReader<'r> {
    type Entity = WithdrawalCotaNFTValueVec;

    const NAME: &'static str = "WithdrawalCotaNFTValueVecReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        WithdrawalCotaNFTValueVecReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(
                Self,
                TotalSizeNotMatch,
                molecule::NUMBER_SIZE * 2,
                slice_len
            );
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            WithdrawalCotaNFTValueReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct WithdrawalCotaNFTValueVecBuilder(pub(crate) Vec<WithdrawalCotaNFTValue>);
impl WithdrawalCotaNFTValueVecBuilder {
    pub fn set(mut self, v: Vec<WithdrawalCotaNFTValue>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: WithdrawalCotaNFTValue) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = WithdrawalCotaNFTValue>>(
        mut self,
        iter: T,
    ) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for WithdrawalCotaNFTValueVecBuilder {
    type Entity = WithdrawalCotaNFTValueVec;

    const NAME: &'static str = "WithdrawalCotaNFTValueVecBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (self.0.len() + 1)
            + self
                .0
                .iter()
                .map(|inner| inner.as_slice().len())
                .sum::<usize>()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 {
            writer.write_all(&molecule::pack_number(
                molecule::NUMBER_SIZE as molecule::Number,
            ))?;
        } else {
            let (total_size, offsets) = self.0.iter().fold(
                (
                    molecule::NUMBER_SIZE * (item_count + 1),
                    Vec::with_capacity(item_count),
                ),
                |(start, mut offsets), inner| {
                    offsets.push(start);
                    (start + inner.as_slice().len(), offsets)
                },
            );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() {
                writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
            }
            for inner in self.0.iter() {
                writer.write_all(inner.as_slice())?;
            }
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        WithdrawalCotaNFTValueVec::new_unchecked(inner.into())
    }
}
pub struct WithdrawalCotaNFTValueVecIterator(WithdrawalCotaNFTValueVec, usize, usize);
impl ::core::iter::Iterator for WithdrawalCotaNFTValueVecIterator {
    type Item = WithdrawalCotaNFTValue;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for WithdrawalCotaNFTValueVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for WithdrawalCotaNFTValueVec {
    type IntoIter = WithdrawalCotaNFTValueVecIterator;
    type Item = WithdrawalCotaNFTValue;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        WithdrawalCotaNFTValueVecIterator(self, 0, len)
    }
}
impl<'r> WithdrawalCotaNFTValueVecReader<'r> {
    pub fn iter<'t>(&'t self) -> WithdrawalCotaNFTValueVecReaderIterator<'t, 'r> {
        WithdrawalCotaNFTValueVecReaderIterator(&self, 0, self.len())
    }
}
pub struct WithdrawalCotaNFTValueVecReaderIterator<'t, 'r>(
    &'t WithdrawalCotaNFTValueVecReader<'r>,
    usize,
    usize,
);
impl<'t: 'r, 'r> ::core::iter::Iterator for WithdrawalCotaNFTValueVecReaderIterator<'t, 'r> {
    type Item = WithdrawalCotaNFTValueReader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator
    for WithdrawalCotaNFTValueVecReaderIterator<'t, 'r>
{
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct WithdrawalCotaNFTEntries(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for WithdrawalCotaNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for WithdrawalCotaNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for WithdrawalCotaNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "hold_keys", self.hold_keys())?;
        write!(f, ", {}: {}", "hold_values", self.hold_values())?;
        write!(f, ", {}: {}", "withdrawal_keys", self.withdrawal_keys())?;
        write!(f, ", {}: {}", "withdrawal_values", self.withdrawal_values())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        write!(f, ", {}: {}", "action", self.action())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for WithdrawalCotaNFTEntries {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            52, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 48, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        WithdrawalCotaNFTEntries::new_unchecked(v.into())
    }
}
impl WithdrawalCotaNFTEntries {
    pub const FIELD_COUNT: usize = 6;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn hold_keys(&self) -> HoldCotaNFTKeyVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        HoldCotaNFTKeyVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn hold_values(&self) -> HoldCotaNFTValueVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        HoldCotaNFTValueVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn withdrawal_keys(&self) -> WithdrawalCotaNFTKeyVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        WithdrawalCotaNFTKeyVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn withdrawal_values(&self) -> WithdrawalCotaNFTValueVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        WithdrawalCotaNFTValueVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn proof(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Bytes::new_unchecked(self.0.slice(start..end))
    }

    pub fn action(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[28..]) as usize;
            Bytes::new_unchecked(self.0.slice(start..end))
        } else {
            Bytes::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> WithdrawalCotaNFTEntriesReader<'r> {
        WithdrawalCotaNFTEntriesReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for WithdrawalCotaNFTEntries {
    type Builder = WithdrawalCotaNFTEntriesBuilder;

    const NAME: &'static str = "WithdrawalCotaNFTEntries";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        WithdrawalCotaNFTEntries(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawalCotaNFTEntriesReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawalCotaNFTEntriesReader::from_compatible_slice(slice)
            .map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .hold_keys(self.hold_keys())
            .hold_values(self.hold_values())
            .withdrawal_keys(self.withdrawal_keys())
            .withdrawal_values(self.withdrawal_values())
            .proof(self.proof())
            .action(self.action())
    }
}
#[derive(Clone, Copy)]
pub struct WithdrawalCotaNFTEntriesReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for WithdrawalCotaNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for WithdrawalCotaNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for WithdrawalCotaNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "hold_keys", self.hold_keys())?;
        write!(f, ", {}: {}", "hold_values", self.hold_values())?;
        write!(f, ", {}: {}", "withdrawal_keys", self.withdrawal_keys())?;
        write!(f, ", {}: {}", "withdrawal_values", self.withdrawal_values())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        write!(f, ", {}: {}", "action", self.action())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> WithdrawalCotaNFTEntriesReader<'r> {
    pub const FIELD_COUNT: usize = 6;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn hold_keys(&self) -> HoldCotaNFTKeyVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        HoldCotaNFTKeyVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn hold_values(&self) -> HoldCotaNFTValueVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        HoldCotaNFTValueVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn withdrawal_keys(&self) -> WithdrawalCotaNFTKeyVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        WithdrawalCotaNFTKeyVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn withdrawal_values(&self) -> WithdrawalCotaNFTValueVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        WithdrawalCotaNFTValueVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn proof(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        BytesReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn action(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[28..]) as usize;
            BytesReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            BytesReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for WithdrawalCotaNFTEntriesReader<'r> {
    type Entity = WithdrawalCotaNFTEntries;

    const NAME: &'static str = "WithdrawalCotaNFTEntriesReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        WithdrawalCotaNFTEntriesReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        HoldCotaNFTKeyVecReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        HoldCotaNFTValueVecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        WithdrawalCotaNFTKeyVecReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        WithdrawalCotaNFTValueVecReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        BytesReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        BytesReader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct WithdrawalCotaNFTEntriesBuilder {
    pub(crate) hold_keys:         HoldCotaNFTKeyVec,
    pub(crate) hold_values:       HoldCotaNFTValueVec,
    pub(crate) withdrawal_keys:   WithdrawalCotaNFTKeyVec,
    pub(crate) withdrawal_values: WithdrawalCotaNFTValueVec,
    pub(crate) proof:             Bytes,
    pub(crate) action:            Bytes,
}
impl WithdrawalCotaNFTEntriesBuilder {
    pub const FIELD_COUNT: usize = 6;

    pub fn hold_keys(mut self, v: HoldCotaNFTKeyVec) -> Self {
        self.hold_keys = v;
        self
    }

    pub fn hold_values(mut self, v: HoldCotaNFTValueVec) -> Self {
        self.hold_values = v;
        self
    }

    pub fn withdrawal_keys(mut self, v: WithdrawalCotaNFTKeyVec) -> Self {
        self.withdrawal_keys = v;
        self
    }

    pub fn withdrawal_values(mut self, v: WithdrawalCotaNFTValueVec) -> Self {
        self.withdrawal_values = v;
        self
    }

    pub fn proof(mut self, v: Bytes) -> Self {
        self.proof = v;
        self
    }

    pub fn action(mut self, v: Bytes) -> Self {
        self.action = v;
        self
    }
}
impl molecule::prelude::Builder for WithdrawalCotaNFTEntriesBuilder {
    type Entity = WithdrawalCotaNFTEntries;

    const NAME: &'static str = "WithdrawalCotaNFTEntriesBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.hold_keys.as_slice().len()
            + self.hold_values.as_slice().len()
            + self.withdrawal_keys.as_slice().len()
            + self.withdrawal_values.as_slice().len()
            + self.proof.as_slice().len()
            + self.action.as_slice().len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.hold_keys.as_slice().len();
        offsets.push(total_size);
        total_size += self.hold_values.as_slice().len();
        offsets.push(total_size);
        total_size += self.withdrawal_keys.as_slice().len();
        offsets.push(total_size);
        total_size += self.withdrawal_values.as_slice().len();
        offsets.push(total_size);
        total_size += self.proof.as_slice().len();
        offsets.push(total_size);
        total_size += self.action.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.hold_keys.as_slice())?;
        writer.write_all(self.hold_values.as_slice())?;
        writer.write_all(self.withdrawal_keys.as_slice())?;
        writer.write_all(self.withdrawal_values.as_slice())?;
        writer.write_all(self.proof.as_slice())?;
        writer.write_all(self.action.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        WithdrawalCotaNFTEntries::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct ClaimCotaNFTKey(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ClaimCotaNFTKey {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ClaimCotaNFTKey {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ClaimCotaNFTKey {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "nft_info", self.nft_info())?;
        write!(f, ", {}: {}", "out_point", self.out_point())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for ClaimCotaNFTKey {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            58, 0, 0, 0, 12, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0,
        ];
        ClaimCotaNFTKey::new_unchecked(v.into())
    }
}
impl ClaimCotaNFTKey {
    pub const FIELD_COUNT: usize = 2;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn nft_info(&self) -> CotaNFTInfo {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        CotaNFTInfo::new_unchecked(self.0.slice(start..end))
    }

    pub fn out_point(&self) -> OutPointSlice {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[12..]) as usize;
            OutPointSlice::new_unchecked(self.0.slice(start..end))
        } else {
            OutPointSlice::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> ClaimCotaNFTKeyReader<'r> {
        ClaimCotaNFTKeyReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ClaimCotaNFTKey {
    type Builder = ClaimCotaNFTKeyBuilder;

    const NAME: &'static str = "ClaimCotaNFTKey";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ClaimCotaNFTKey(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimCotaNFTKeyReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimCotaNFTKeyReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .nft_info(self.nft_info())
            .out_point(self.out_point())
    }
}
#[derive(Clone, Copy)]
pub struct ClaimCotaNFTKeyReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ClaimCotaNFTKeyReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ClaimCotaNFTKeyReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ClaimCotaNFTKeyReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "nft_info", self.nft_info())?;
        write!(f, ", {}: {}", "out_point", self.out_point())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> ClaimCotaNFTKeyReader<'r> {
    pub const FIELD_COUNT: usize = 2;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn nft_info(&self) -> CotaNFTInfoReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        CotaNFTInfoReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn out_point(&self) -> OutPointSliceReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[12..]) as usize;
            OutPointSliceReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            OutPointSliceReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ClaimCotaNFTKeyReader<'r> {
    type Entity = ClaimCotaNFTKey;

    const NAME: &'static str = "ClaimCotaNFTKeyReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        ClaimCotaNFTKeyReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        CotaNFTInfoReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        OutPointSliceReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ClaimCotaNFTKeyBuilder {
    pub(crate) nft_info:  CotaNFTInfo,
    pub(crate) out_point: OutPointSlice,
}
impl ClaimCotaNFTKeyBuilder {
    pub const FIELD_COUNT: usize = 2;

    pub fn nft_info(mut self, v: CotaNFTInfo) -> Self {
        self.nft_info = v;
        self
    }

    pub fn out_point(mut self, v: OutPointSlice) -> Self {
        self.out_point = v;
        self
    }
}
impl molecule::prelude::Builder for ClaimCotaNFTKeyBuilder {
    type Entity = ClaimCotaNFTKey;

    const NAME: &'static str = "ClaimCotaNFTKeyBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.nft_info.as_slice().len()
            + self.out_point.as_slice().len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.nft_info.as_slice().len();
        offsets.push(total_size);
        total_size += self.out_point.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.nft_info.as_slice())?;
        writer.write_all(self.out_point.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ClaimCotaNFTKey::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct ClaimCotaNFTKeyVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ClaimCotaNFTKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ClaimCotaNFTKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ClaimCotaNFTKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for ClaimCotaNFTKeyVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![4, 0, 0, 0];
        ClaimCotaNFTKeyVec::new_unchecked(v.into())
    }
}
impl ClaimCotaNFTKeyVec {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<ClaimCotaNFTKey> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> ClaimCotaNFTKey {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            ClaimCotaNFTKey::new_unchecked(self.0.slice(start..))
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            ClaimCotaNFTKey::new_unchecked(self.0.slice(start..end))
        }
    }

    pub fn as_reader<'r>(&'r self) -> ClaimCotaNFTKeyVecReader<'r> {
        ClaimCotaNFTKeyVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ClaimCotaNFTKeyVec {
    type Builder = ClaimCotaNFTKeyVecBuilder;

    const NAME: &'static str = "ClaimCotaNFTKeyVec";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ClaimCotaNFTKeyVec(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimCotaNFTKeyVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimCotaNFTKeyVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct ClaimCotaNFTKeyVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ClaimCotaNFTKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ClaimCotaNFTKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ClaimCotaNFTKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> ClaimCotaNFTKeyVecReader<'r> {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<ClaimCotaNFTKeyReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> ClaimCotaNFTKeyReader<'r> {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            ClaimCotaNFTKeyReader::new_unchecked(&self.as_slice()[start..])
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            ClaimCotaNFTKeyReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ClaimCotaNFTKeyVecReader<'r> {
    type Entity = ClaimCotaNFTKeyVec;

    const NAME: &'static str = "ClaimCotaNFTKeyVecReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        ClaimCotaNFTKeyVecReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(
                Self,
                TotalSizeNotMatch,
                molecule::NUMBER_SIZE * 2,
                slice_len
            );
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            ClaimCotaNFTKeyReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ClaimCotaNFTKeyVecBuilder(pub(crate) Vec<ClaimCotaNFTKey>);
impl ClaimCotaNFTKeyVecBuilder {
    pub fn set(mut self, v: Vec<ClaimCotaNFTKey>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: ClaimCotaNFTKey) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = ClaimCotaNFTKey>>(
        mut self,
        iter: T,
    ) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for ClaimCotaNFTKeyVecBuilder {
    type Entity = ClaimCotaNFTKeyVec;

    const NAME: &'static str = "ClaimCotaNFTKeyVecBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (self.0.len() + 1)
            + self
                .0
                .iter()
                .map(|inner| inner.as_slice().len())
                .sum::<usize>()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 {
            writer.write_all(&molecule::pack_number(
                molecule::NUMBER_SIZE as molecule::Number,
            ))?;
        } else {
            let (total_size, offsets) = self.0.iter().fold(
                (
                    molecule::NUMBER_SIZE * (item_count + 1),
                    Vec::with_capacity(item_count),
                ),
                |(start, mut offsets), inner| {
                    offsets.push(start);
                    (start + inner.as_slice().len(), offsets)
                },
            );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() {
                writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
            }
            for inner in self.0.iter() {
                writer.write_all(inner.as_slice())?;
            }
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ClaimCotaNFTKeyVec::new_unchecked(inner.into())
    }
}
pub struct ClaimCotaNFTKeyVecIterator(ClaimCotaNFTKeyVec, usize, usize);
impl ::core::iter::Iterator for ClaimCotaNFTKeyVecIterator {
    type Item = ClaimCotaNFTKey;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for ClaimCotaNFTKeyVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for ClaimCotaNFTKeyVec {
    type IntoIter = ClaimCotaNFTKeyVecIterator;
    type Item = ClaimCotaNFTKey;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        ClaimCotaNFTKeyVecIterator(self, 0, len)
    }
}
impl<'r> ClaimCotaNFTKeyVecReader<'r> {
    pub fn iter<'t>(&'t self) -> ClaimCotaNFTKeyVecReaderIterator<'t, 'r> {
        ClaimCotaNFTKeyVecReaderIterator(&self, 0, self.len())
    }
}
pub struct ClaimCotaNFTKeyVecReaderIterator<'t, 'r>(&'t ClaimCotaNFTKeyVecReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for ClaimCotaNFTKeyVecReaderIterator<'t, 'r> {
    type Item = ClaimCotaNFTKeyReader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for ClaimCotaNFTKeyVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct ClaimCotaNFTValueVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ClaimCotaNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ClaimCotaNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ClaimCotaNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for ClaimCotaNFTValueVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        ClaimCotaNFTValueVec::new_unchecked(v.into())
    }
}
impl ClaimCotaNFTValueVec {
    pub const ITEM_SIZE: usize = 32;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<Byte32> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> Byte32 {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Byte32::new_unchecked(self.0.slice(start..end))
    }

    pub fn as_reader<'r>(&'r self) -> ClaimCotaNFTValueVecReader<'r> {
        ClaimCotaNFTValueVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ClaimCotaNFTValueVec {
    type Builder = ClaimCotaNFTValueVecBuilder;

    const NAME: &'static str = "ClaimCotaNFTValueVec";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ClaimCotaNFTValueVec(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimCotaNFTValueVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimCotaNFTValueVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct ClaimCotaNFTValueVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ClaimCotaNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ClaimCotaNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ClaimCotaNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> ClaimCotaNFTValueVecReader<'r> {
    pub const ITEM_SIZE: usize = 32;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<Byte32Reader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> Byte32Reader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for ClaimCotaNFTValueVecReader<'r> {
    type Entity = ClaimCotaNFTValueVec;

    const NAME: &'static str = "ClaimCotaNFTValueVecReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        ClaimCotaNFTValueVecReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ClaimCotaNFTValueVecBuilder(pub(crate) Vec<Byte32>);
impl ClaimCotaNFTValueVecBuilder {
    pub const ITEM_SIZE: usize = 32;

    pub fn set(mut self, v: Vec<Byte32>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: Byte32) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = Byte32>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for ClaimCotaNFTValueVecBuilder {
    type Entity = ClaimCotaNFTValueVec;

    const NAME: &'static str = "ClaimCotaNFTValueVecBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ClaimCotaNFTValueVec::new_unchecked(inner.into())
    }
}
pub struct ClaimCotaNFTValueVecIterator(ClaimCotaNFTValueVec, usize, usize);
impl ::core::iter::Iterator for ClaimCotaNFTValueVecIterator {
    type Item = Byte32;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for ClaimCotaNFTValueVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for ClaimCotaNFTValueVec {
    type IntoIter = ClaimCotaNFTValueVecIterator;
    type Item = Byte32;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        ClaimCotaNFTValueVecIterator(self, 0, len)
    }
}
impl<'r> ClaimCotaNFTValueVecReader<'r> {
    pub fn iter<'t>(&'t self) -> ClaimCotaNFTValueVecReaderIterator<'t, 'r> {
        ClaimCotaNFTValueVecReaderIterator(&self, 0, self.len())
    }
}
pub struct ClaimCotaNFTValueVecReaderIterator<'t, 'r>(
    &'t ClaimCotaNFTValueVecReader<'r>,
    usize,
    usize,
);
impl<'t: 'r, 'r> ::core::iter::Iterator for ClaimCotaNFTValueVecReaderIterator<'t, 'r> {
    type Item = Byte32Reader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for ClaimCotaNFTValueVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct ClaimCotaNFTEntries(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ClaimCotaNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ClaimCotaNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ClaimCotaNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "hold_keys", self.hold_keys())?;
        write!(f, ", {}: {}", "hold_values", self.hold_values())?;
        write!(f, ", {}: {}", "claim_keys", self.claim_keys())?;
        write!(f, ", {}: {}", "claim_values", self.claim_values())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        write!(f, ", {}: {}", "withdrawal_proof", self.withdrawal_proof())?;
        write!(f, ", {}: {}", "action", self.action())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for ClaimCotaNFTEntries {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            60, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 48, 0, 0, 0, 52, 0, 0,
            0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0,
        ];
        ClaimCotaNFTEntries::new_unchecked(v.into())
    }
}
impl ClaimCotaNFTEntries {
    pub const FIELD_COUNT: usize = 7;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn hold_keys(&self) -> HoldCotaNFTKeyVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        HoldCotaNFTKeyVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn hold_values(&self) -> HoldCotaNFTValueVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        HoldCotaNFTValueVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn claim_keys(&self) -> ClaimCotaNFTKeyVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        ClaimCotaNFTKeyVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn claim_values(&self) -> ClaimCotaNFTValueVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        ClaimCotaNFTValueVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn proof(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Bytes::new_unchecked(self.0.slice(start..end))
    }

    pub fn withdrawal_proof(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Bytes::new_unchecked(self.0.slice(start..end))
    }

    pub fn action(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[32..]) as usize;
            Bytes::new_unchecked(self.0.slice(start..end))
        } else {
            Bytes::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> ClaimCotaNFTEntriesReader<'r> {
        ClaimCotaNFTEntriesReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ClaimCotaNFTEntries {
    type Builder = ClaimCotaNFTEntriesBuilder;

    const NAME: &'static str = "ClaimCotaNFTEntries";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ClaimCotaNFTEntries(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimCotaNFTEntriesReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimCotaNFTEntriesReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .hold_keys(self.hold_keys())
            .hold_values(self.hold_values())
            .claim_keys(self.claim_keys())
            .claim_values(self.claim_values())
            .proof(self.proof())
            .withdrawal_proof(self.withdrawal_proof())
            .action(self.action())
    }
}
#[derive(Clone, Copy)]
pub struct ClaimCotaNFTEntriesReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ClaimCotaNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ClaimCotaNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ClaimCotaNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "hold_keys", self.hold_keys())?;
        write!(f, ", {}: {}", "hold_values", self.hold_values())?;
        write!(f, ", {}: {}", "claim_keys", self.claim_keys())?;
        write!(f, ", {}: {}", "claim_values", self.claim_values())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        write!(f, ", {}: {}", "withdrawal_proof", self.withdrawal_proof())?;
        write!(f, ", {}: {}", "action", self.action())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> ClaimCotaNFTEntriesReader<'r> {
    pub const FIELD_COUNT: usize = 7;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn hold_keys(&self) -> HoldCotaNFTKeyVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        HoldCotaNFTKeyVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn hold_values(&self) -> HoldCotaNFTValueVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        HoldCotaNFTValueVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn claim_keys(&self) -> ClaimCotaNFTKeyVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        ClaimCotaNFTKeyVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn claim_values(&self) -> ClaimCotaNFTValueVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        ClaimCotaNFTValueVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn proof(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        BytesReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn withdrawal_proof(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        BytesReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn action(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[32..]) as usize;
            BytesReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            BytesReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ClaimCotaNFTEntriesReader<'r> {
    type Entity = ClaimCotaNFTEntries;

    const NAME: &'static str = "ClaimCotaNFTEntriesReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        ClaimCotaNFTEntriesReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        HoldCotaNFTKeyVecReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        HoldCotaNFTValueVecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        ClaimCotaNFTKeyVecReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        ClaimCotaNFTValueVecReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        BytesReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        BytesReader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        BytesReader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ClaimCotaNFTEntriesBuilder {
    pub(crate) hold_keys:        HoldCotaNFTKeyVec,
    pub(crate) hold_values:      HoldCotaNFTValueVec,
    pub(crate) claim_keys:       ClaimCotaNFTKeyVec,
    pub(crate) claim_values:     ClaimCotaNFTValueVec,
    pub(crate) proof:            Bytes,
    pub(crate) withdrawal_proof: Bytes,
    pub(crate) action:           Bytes,
}
impl ClaimCotaNFTEntriesBuilder {
    pub const FIELD_COUNT: usize = 7;

    pub fn hold_keys(mut self, v: HoldCotaNFTKeyVec) -> Self {
        self.hold_keys = v;
        self
    }

    pub fn hold_values(mut self, v: HoldCotaNFTValueVec) -> Self {
        self.hold_values = v;
        self
    }

    pub fn claim_keys(mut self, v: ClaimCotaNFTKeyVec) -> Self {
        self.claim_keys = v;
        self
    }

    pub fn claim_values(mut self, v: ClaimCotaNFTValueVec) -> Self {
        self.claim_values = v;
        self
    }

    pub fn proof(mut self, v: Bytes) -> Self {
        self.proof = v;
        self
    }

    pub fn withdrawal_proof(mut self, v: Bytes) -> Self {
        self.withdrawal_proof = v;
        self
    }

    pub fn action(mut self, v: Bytes) -> Self {
        self.action = v;
        self
    }
}
impl molecule::prelude::Builder for ClaimCotaNFTEntriesBuilder {
    type Entity = ClaimCotaNFTEntries;

    const NAME: &'static str = "ClaimCotaNFTEntriesBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.hold_keys.as_slice().len()
            + self.hold_values.as_slice().len()
            + self.claim_keys.as_slice().len()
            + self.claim_values.as_slice().len()
            + self.proof.as_slice().len()
            + self.withdrawal_proof.as_slice().len()
            + self.action.as_slice().len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.hold_keys.as_slice().len();
        offsets.push(total_size);
        total_size += self.hold_values.as_slice().len();
        offsets.push(total_size);
        total_size += self.claim_keys.as_slice().len();
        offsets.push(total_size);
        total_size += self.claim_values.as_slice().len();
        offsets.push(total_size);
        total_size += self.proof.as_slice().len();
        offsets.push(total_size);
        total_size += self.withdrawal_proof.as_slice().len();
        offsets.push(total_size);
        total_size += self.action.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.hold_keys.as_slice())?;
        writer.write_all(self.hold_values.as_slice())?;
        writer.write_all(self.claim_keys.as_slice())?;
        writer.write_all(self.claim_values.as_slice())?;
        writer.write_all(self.proof.as_slice())?;
        writer.write_all(self.withdrawal_proof.as_slice())?;
        writer.write_all(self.action.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ClaimCotaNFTEntries::new_unchecked(inner.into())
    }
}
