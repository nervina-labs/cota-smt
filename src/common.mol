// Uint16/Uint32: big endian

array Byte32 [byte; 32];
array Uint16 [byte; 2];
array Uint32 [byte; 4];
vector Bytes <byte>;

array CotaId [byte; 20];
array Characteristic [byte; 20];
array OutPointSlice [byte; 24];

struct CotaNFTId {
  smt_type: Uint16,
  cota_id: CotaId,
  index: Uint32,
}

struct CotaNFTInfo {
  configure: byte,
  state: byte,
  characteristic: Characteristic,
}

struct DefineCotaNFTId {
  smt_type: Uint16,
  cota_id: CotaId,
}

struct DefineCotaNFTValue {
  total: Uint32,
  issued: Uint32,
  configure: byte,
}
vector DefineCotaNFTKeyVec <DefineCotaNFTId>;
vector DefineCotaNFTValueVec <DefineCotaNFTValue>;


vector HoldCotaNFTKeyVec <CotaNFTId>;
vector HoldCotaNFTValueVec <CotaNFTInfo>;


table WithdrawalCotaNFTValue {
  nft_info: CotaNFTInfo,
  to_lock: Bytes,
  out_point: OutPointSlice,
}
vector WithdrawalCotaNFTKeyVec <CotaNFTId>;
vector WithdrawalCotaNFTValueVec <WithdrawalCotaNFTValue>;


struct ClaimCotaNFTKey {
  nft_id: CotaNFTId,
  out_point: OutPointSlice,
}
vector ClaimCotaNFTKeyVec <ClaimCotaNFTKey>;
vector ClaimCotaNFTValueVec <Byte32>;
struct ClaimCotaNFTInfo {
  version: byte,
  nft_info: CotaNFTInfo,
}
vector ClaimCotaNFTInfoVec <ClaimCotaNFTInfo>;


// V1
struct WithdrawalCotaNFTKeyV1 {
  nft_id: CotaNFTId,
  out_point: OutPointSlice,
}
vector WithdrawalCotaNFTKeyV1Vec <WithdrawalCotaNFTKeyV1>;

table WithdrawalCotaNFTValueV1 {
  nft_info: CotaNFTInfo,
  to_lock: Bytes,
}
vector WithdrawalCotaNFTValueV1Vec <WithdrawalCotaNFTValueV1>;
