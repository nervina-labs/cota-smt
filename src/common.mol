// The `UintN` is used to store a `N` bits unsigned integer
// as a byte array in big endian.

array Uint16 [byte; 2];
array Uint32 [byte; 4];
array Uint64 [byte; 8];
array Byte6 [byte; 6];
array Byte9 [byte; 9];
array Byte20 [byte; 20];
array Byte24 [byte; 24];
array Byte32 [byte; 32];

array CotaId [byte; 20];
array Characteristic [byte; 20];
array OutPointSlice [byte; 24];

vector Bytes <byte>;
vector Uint32Vec <Uint32>;
vector Byte32Vec <Byte32>;

struct CotaNFTId {
  smt_type: Uint16,
  cota_id: CotaId,
  index: Uint32,
}

struct CotaNFTInfo {
  configure: byte,
  state: byte,
  characteristic: Characteristic,
}

table MerkleProof {
  indices: Uint32Vec,
  lemmas: Byte32Vec,
}

table TransactionProof {
  witnesses_root: Byte32,
  proof: MerkleProof,
}

struct DefineCotaNFTId {
  smt_type: Uint16,
  cota_id: CotaId,
}

struct DefineCotaNFTValue {
  total: Uint32,
  issued: Uint32,
  configure: byte,
}
vector DefineCotaNFTKeyVec <DefineCotaNFTId>;
vector DefineCotaNFTValueVec <DefineCotaNFTValue>;


vector HoldCotaNFTKeyVec <CotaNFTId>;
vector HoldCotaNFTValueVec <CotaNFTInfo>;


table WithdrawalCotaNFTValue {
  nft_info: CotaNFTInfo,
  to_lock: Bytes,
  out_point: OutPointSlice,
}
vector WithdrawalCotaNFTKeyVec <CotaNFTId>;
vector WithdrawalCotaNFTValueVec <WithdrawalCotaNFTValue>;


struct ClaimCotaNFTKey {
  nft_id: CotaNFTId,
  out_point: OutPointSlice,
}
vector ClaimCotaNFTKeyVec <ClaimCotaNFTKey>;
vector ClaimCotaNFTValueVec <Byte32>;
struct ClaimCotaNFTInfo {
  version: byte,
  nft_info: CotaNFTInfo,
}
vector ClaimCotaNFTInfoVec <ClaimCotaNFTInfo>;


// V1
struct WithdrawalCotaNFTKeyV1 {
  nft_id: CotaNFTId,
  out_point: OutPointSlice,
}
vector WithdrawalCotaNFTKeyV1Vec <WithdrawalCotaNFTKeyV1>;

table WithdrawalCotaNFTValueV1 {
  nft_info: CotaNFTInfo,
  to_lock: Bytes,
}
vector WithdrawalCotaNFTValueV1Vec <WithdrawalCotaNFTValueV1>;
